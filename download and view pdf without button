import SwiftUI
import WebKit

struct PDFView: UIViewRepresentable {
    let request: URLRequest

    func makeUIView(context: Context) -> WKWebView {
        return WKWebView()
    }

    func updateUIView(_ uiView: WKWebView, context: Context) {
        uiView.load(request)
    }
}

struct ContentView: View {
    @State private var urlString = ""
    @State private var isLoading = false
    @State private var error: Error?

    var body: some View {
        VStack {
            if error != nil {
                Text("Error occured")
            } else if isLoading {
                Text("Loading...")
            } else {
                PDFView(request: URLRequest(url: URL(string: urlString)!))
            }
        }
        .onAppear(perform: loadPDF)
    }

    func loadPDF() {
        guard let url = URL(string: urlString) else {
            return
        }

        isLoading = true
        error = nil

        URLSession.shared.dataTask(with: url) { data, response, error in
            DispatchQueue.main.async {
                if let error = error {
                    self.error = error
                } else if let data = data, let pdfURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first?.appendingPathComponent("file.pdf") {
                    do {
                        try data.write(to: pdfURL)
                        self.urlString = pdfURL.absoluteString
                    } catch {
                        self.error = error
                    }
                }

                self.isLoading = false
            }
        }.resume()
    }
}
